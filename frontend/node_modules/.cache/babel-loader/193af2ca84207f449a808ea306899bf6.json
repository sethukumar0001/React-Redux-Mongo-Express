{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING, ADD_DATA } from \"./type\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:8000/auth/register\", userData).then(res => history.push(\"/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const AddCounterAction = data => {\n  return {\n    type: ADD_DATA,\n    counter\n  };\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:8000/auth/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/home/sethu/Desktop/lovely/frontend/src/Redux/Actions/actionCreators.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","ADD_DATA","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","AddCounterAction","counter","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,EAAoDC,QAApD,QAAoE,QAApE,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DV,EAAAA,KAAK,CACFW,IADH,CACQ,qCADR,EAC+CH,QAD/C,EAEGI,IAFH,CAEQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf,EAGGC,KAHH,CAGSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAVM;AAYP,OAAO,MAAMC,gBAAgB,GAAGD,IAAD,IAAQ;AACrC,SAAM;AACHH,IAAAA,IAAI,EAACX,QADF;AAEHgB,IAAAA;AAFG,GAAN;AAIC,CALI,C,CAOP;;AACA,OAAO,MAAMC,SAAS,GAAGf,QAAQ,IAAIE,QAAQ,IAAI;AAC/CV,EAAAA,KAAK,CACFW,IADH,CACQ,kCADR,EAC4CH,QAD5C,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AAEA;AAHW,UAIHW,KAJG,GAIOX,GAAG,CAACO,IAJX,CAIHI,KAJG;AAKXC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALW,CAMX;;AACAvB,IAAAA,YAAY,CAACuB,KAAD,CAAZ,CAPW,CAQX;;AACA,UAAMG,OAAO,GAAGzB,UAAU,CAACsB,KAAD,CAA1B,CATW,CAUX;;AACAd,IAAAA,QAAQ,CAACkB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAdH,EAeGZ,KAfH,CAeSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAhBZ;AAqBD,CAtBM,C,CAwBP;;AACA,OAAO,MAAMQ,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLV,IAAAA,IAAI,EAAEb,gBADD;AAELc,IAAAA,OAAO,EAAES;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLZ,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMyB,UAAU,GAAG,MAAMpB,QAAQ,IAAI;AAC1C;AACAe,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA9B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAS,EAAAA,QAAQ,CAACkB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING,ADD_DATA } from \"./type\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"http://localhost:8000/auth/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\nexport const AddCounterAction =(data)=>{\n  return{\n     type:ADD_DATA,\n     counter\n  }\n  }\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"http://localhost:8000/auth/login\", userData)\n    .then(res => {\n      // Save to localStorage\n\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}